// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: room.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Tutorial {

  /// <summary>Holder for reflection information generated from room.proto</summary>
  public static partial class RoomReflection {

    #region Descriptor
    /// <summary>File descriptor for room.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RoomReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgpyb29tLnByb3RvEgh0dXRvcmlhbCI2CghQb3NpdGlvbhIJCgF4GAEgASgC",
            "EgkKAXkYAiABKAISCQoBehgDIAEoAhIJCgF3GAQgASgCIlQKCE1vdmVtZW50",
            "EhsKE01vdmVtZW50SW5wdXRWYWx1ZVgYASABKAISGwoTTW92ZW1lbnRJbnB1",
            "dFZhbHVlWRgCIAEoAhIOCgZSb2F0ZVgYAyABKAIikQEKBlBsYXllchIMCgRu",
            "YW1lGAEgASgJEhIKCnBsYXllclR5cGUYAiABKAUSJAoIcG9zaXRpb24YAyAB",
            "KAsyEi50dXRvcmlhbC5Qb3NpdGlvbhIkCghtb3ZlbWVudBgEIAEoCzISLnR1",
            "dG9yaWFsLk1vdmVtZW50EgoKAkhQGAUgASgFEg0KBXN0YXRlGAYgASgFImIK",
            "DEl0ZW1Ub1BpY2tVcBIMCgRuYW1lGAEgASgJEg8KB2JlbG9uZ3MYAiABKAkS",
            "JAoIcG9zaXRpb24YAyABKAsyEi50dXRvcmlhbC5Qb3NpdGlvbhINCgVzdGF0",
            "ZRgEIAEoBSJ/CgRSb29tEg8KB3Jvb21OdW0YASABKAUSDQoFbGV2ZWwYAiAB",
            "KAUSIQoHcGxheWVycxgDIAMoCzIQLnR1dG9yaWFsLlBsYXllchIlCgVpdGVt",
            "cxgEIAMoCzIWLnR1dG9yaWFsLkl0ZW1Ub1BpY2tVcBINCgVzdGF0ZRgFIAEo",
            "BSI3ChFJbmRpdmlkdWFsQ29tZmlybRIQCgh1c2VybmFtZRgBIAEoCRIQCghw",
            "YXNzd29yZBgCIAEoCSJvCgZUb1NlbmQSDAoEdHlwZRgBIAEoCRIOCgZyZXN1",
            "bHQYAiABKAkSKQoEdXNlchgDIAEoCzIbLnR1dG9yaWFsLkluZGl2aWR1YWxD",
            "b21maXJtEhwKBHJvb20YBCABKAsyDi50dXRvcmlhbC5Sb29tYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Tutorial.Position), global::Tutorial.Position.Parser, new[]{ "X", "Y", "Z", "W" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tutorial.Movement), global::Tutorial.Movement.Parser, new[]{ "MovementInputValueX", "MovementInputValueY", "RoateX" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tutorial.Player), global::Tutorial.Player.Parser, new[]{ "Name", "PlayerType", "Position", "Movement", "HP", "State" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tutorial.ItemToPickUp), global::Tutorial.ItemToPickUp.Parser, new[]{ "Name", "Belongs", "Position", "State" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tutorial.Room), global::Tutorial.Room.Parser, new[]{ "RoomNum", "Level", "Players", "Items", "State" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tutorial.IndividualComfirm), global::Tutorial.IndividualComfirm.Parser, new[]{ "Username", "Password" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tutorial.ToSend), global::Tutorial.ToSend.Parser, new[]{ "Type", "Result", "User", "Room" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Position : pb::IMessage<Position> {
    private static readonly pb::MessageParser<Position> _parser = new pb::MessageParser<Position>(() => new Position());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Position> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tutorial.RoomReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Position() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Position(Position other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      w_ = other.w_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Position Clone() {
      return new Position(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    /// <summary>Field number for the "w" field.</summary>
    public const int WFieldNumber = 4;
    private float w_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float W {
      get { return w_; }
      set {
        w_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Position);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Position other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      if (W != other.W) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= X.GetHashCode();
      if (Y != 0F) hash ^= Y.GetHashCode();
      if (Z != 0F) hash ^= Z.GetHashCode();
      if (W != 0F) hash ^= W.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (W != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(W);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (W != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Position other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      if (other.W != 0F) {
        W = other.W;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
          case 37: {
            W = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Movement : pb::IMessage<Movement> {
    private static readonly pb::MessageParser<Movement> _parser = new pb::MessageParser<Movement>(() => new Movement());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Movement> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tutorial.RoomReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Movement() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Movement(Movement other) : this() {
      movementInputValueX_ = other.movementInputValueX_;
      movementInputValueY_ = other.movementInputValueY_;
      roateX_ = other.roateX_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Movement Clone() {
      return new Movement(this);
    }

    /// <summary>Field number for the "MovementInputValueX" field.</summary>
    public const int MovementInputValueXFieldNumber = 1;
    private float movementInputValueX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MovementInputValueX {
      get { return movementInputValueX_; }
      set {
        movementInputValueX_ = value;
      }
    }

    /// <summary>Field number for the "MovementInputValueY" field.</summary>
    public const int MovementInputValueYFieldNumber = 2;
    private float movementInputValueY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MovementInputValueY {
      get { return movementInputValueY_; }
      set {
        movementInputValueY_ = value;
      }
    }

    /// <summary>Field number for the "RoateX" field.</summary>
    public const int RoateXFieldNumber = 3;
    private float roateX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RoateX {
      get { return roateX_; }
      set {
        roateX_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Movement);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Movement other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MovementInputValueX != other.MovementInputValueX) return false;
      if (MovementInputValueY != other.MovementInputValueY) return false;
      if (RoateX != other.RoateX) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MovementInputValueX != 0F) hash ^= MovementInputValueX.GetHashCode();
      if (MovementInputValueY != 0F) hash ^= MovementInputValueY.GetHashCode();
      if (RoateX != 0F) hash ^= RoateX.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MovementInputValueX != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(MovementInputValueX);
      }
      if (MovementInputValueY != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(MovementInputValueY);
      }
      if (RoateX != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(RoateX);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MovementInputValueX != 0F) {
        size += 1 + 4;
      }
      if (MovementInputValueY != 0F) {
        size += 1 + 4;
      }
      if (RoateX != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Movement other) {
      if (other == null) {
        return;
      }
      if (other.MovementInputValueX != 0F) {
        MovementInputValueX = other.MovementInputValueX;
      }
      if (other.MovementInputValueY != 0F) {
        MovementInputValueY = other.MovementInputValueY;
      }
      if (other.RoateX != 0F) {
        RoateX = other.RoateX;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            MovementInputValueX = input.ReadFloat();
            break;
          }
          case 21: {
            MovementInputValueY = input.ReadFloat();
            break;
          }
          case 29: {
            RoateX = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Player : pb::IMessage<Player> {
    private static readonly pb::MessageParser<Player> _parser = new pb::MessageParser<Player>(() => new Player());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Player> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tutorial.RoomReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player(Player other) : this() {
      name_ = other.name_;
      playerType_ = other.playerType_;
      Position = other.position_ != null ? other.Position.Clone() : null;
      Movement = other.movement_ != null ? other.Movement.Clone() : null;
      hP_ = other.hP_;
      state_ = other.state_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player Clone() {
      return new Player(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "playerType" field.</summary>
    public const int PlayerTypeFieldNumber = 2;
    private int playerType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerType {
      get { return playerType_; }
      set {
        playerType_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 3;
    private global::Tutorial.Position position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tutorial.Position Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "movement" field.</summary>
    public const int MovementFieldNumber = 4;
    private global::Tutorial.Movement movement_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tutorial.Movement Movement {
      get { return movement_; }
      set {
        movement_ = value;
      }
    }

    /// <summary>Field number for the "HP" field.</summary>
    public const int HPFieldNumber = 5;
    private int hP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HP {
      get { return hP_; }
      set {
        hP_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 6;
    private int state_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Player);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Player other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (PlayerType != other.PlayerType) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Movement, other.Movement)) return false;
      if (HP != other.HP) return false;
      if (State != other.State) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (PlayerType != 0) hash ^= PlayerType.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (movement_ != null) hash ^= Movement.GetHashCode();
      if (HP != 0) hash ^= HP.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (PlayerType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PlayerType);
      }
      if (position_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Position);
      }
      if (movement_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Movement);
      }
      if (HP != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(HP);
      }
      if (State != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(State);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (PlayerType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerType);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (movement_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Movement);
      }
      if (HP != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HP);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Player other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.PlayerType != 0) {
        PlayerType = other.PlayerType;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::Tutorial.Position();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.movement_ != null) {
        if (movement_ == null) {
          movement_ = new global::Tutorial.Movement();
        }
        Movement.MergeFrom(other.Movement);
      }
      if (other.HP != 0) {
        HP = other.HP;
      }
      if (other.State != 0) {
        State = other.State;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            PlayerType = input.ReadInt32();
            break;
          }
          case 26: {
            if (position_ == null) {
              position_ = new global::Tutorial.Position();
            }
            input.ReadMessage(position_);
            break;
          }
          case 34: {
            if (movement_ == null) {
              movement_ = new global::Tutorial.Movement();
            }
            input.ReadMessage(movement_);
            break;
          }
          case 40: {
            HP = input.ReadInt32();
            break;
          }
          case 48: {
            State = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ItemToPickUp : pb::IMessage<ItemToPickUp> {
    private static readonly pb::MessageParser<ItemToPickUp> _parser = new pb::MessageParser<ItemToPickUp>(() => new ItemToPickUp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemToPickUp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tutorial.RoomReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemToPickUp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemToPickUp(ItemToPickUp other) : this() {
      name_ = other.name_;
      belongs_ = other.belongs_;
      Position = other.position_ != null ? other.Position.Clone() : null;
      state_ = other.state_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemToPickUp Clone() {
      return new ItemToPickUp(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "belongs" field.</summary>
    public const int BelongsFieldNumber = 2;
    private string belongs_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Belongs {
      get { return belongs_; }
      set {
        belongs_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 3;
    private global::Tutorial.Position position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tutorial.Position Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 4;
    private int state_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ItemToPickUp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ItemToPickUp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Belongs != other.Belongs) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (State != other.State) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Belongs.Length != 0) hash ^= Belongs.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Belongs.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Belongs);
      }
      if (position_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Position);
      }
      if (State != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(State);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Belongs.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Belongs);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ItemToPickUp other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Belongs.Length != 0) {
        Belongs = other.Belongs;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::Tutorial.Position();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.State != 0) {
        State = other.State;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Belongs = input.ReadString();
            break;
          }
          case 26: {
            if (position_ == null) {
              position_ = new global::Tutorial.Position();
            }
            input.ReadMessage(position_);
            break;
          }
          case 32: {
            State = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Room : pb::IMessage<Room> {
    private static readonly pb::MessageParser<Room> _parser = new pb::MessageParser<Room>(() => new Room());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Room> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tutorial.RoomReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Room() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Room(Room other) : this() {
      roomNum_ = other.roomNum_;
      level_ = other.level_;
      players_ = other.players_.Clone();
      items_ = other.items_.Clone();
      state_ = other.state_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Room Clone() {
      return new Room(this);
    }

    /// <summary>Field number for the "roomNum" field.</summary>
    public const int RoomNumFieldNumber = 1;
    private int roomNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomNum {
      get { return roomNum_; }
      set {
        roomNum_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 2;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "players" field.</summary>
    public const int PlayersFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Tutorial.Player> _repeated_players_codec
        = pb::FieldCodec.ForMessage(26, global::Tutorial.Player.Parser);
    private readonly pbc::RepeatedField<global::Tutorial.Player> players_ = new pbc::RepeatedField<global::Tutorial.Player>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tutorial.Player> Players {
      get { return players_; }
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Tutorial.ItemToPickUp> _repeated_items_codec
        = pb::FieldCodec.ForMessage(34, global::Tutorial.ItemToPickUp.Parser);
    private readonly pbc::RepeatedField<global::Tutorial.ItemToPickUp> items_ = new pbc::RepeatedField<global::Tutorial.ItemToPickUp>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tutorial.ItemToPickUp> Items {
      get { return items_; }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 5;
    private int state_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Room);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Room other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomNum != other.RoomNum) return false;
      if (Level != other.Level) return false;
      if(!players_.Equals(other.players_)) return false;
      if(!items_.Equals(other.items_)) return false;
      if (State != other.State) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomNum != 0) hash ^= RoomNum.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      hash ^= players_.GetHashCode();
      hash ^= items_.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomNum != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoomNum);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Level);
      }
      players_.WriteTo(output, _repeated_players_codec);
      items_.WriteTo(output, _repeated_items_codec);
      if (State != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(State);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomNum);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      size += players_.CalculateSize(_repeated_players_codec);
      size += items_.CalculateSize(_repeated_items_codec);
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Room other) {
      if (other == null) {
        return;
      }
      if (other.RoomNum != 0) {
        RoomNum = other.RoomNum;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      players_.Add(other.players_);
      items_.Add(other.items_);
      if (other.State != 0) {
        State = other.State;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoomNum = input.ReadInt32();
            break;
          }
          case 16: {
            Level = input.ReadInt32();
            break;
          }
          case 26: {
            players_.AddEntriesFrom(input, _repeated_players_codec);
            break;
          }
          case 34: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
          case 40: {
            State = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IndividualComfirm : pb::IMessage<IndividualComfirm> {
    private static readonly pb::MessageParser<IndividualComfirm> _parser = new pb::MessageParser<IndividualComfirm>(() => new IndividualComfirm());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IndividualComfirm> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tutorial.RoomReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IndividualComfirm() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IndividualComfirm(IndividualComfirm other) : this() {
      username_ = other.username_;
      password_ = other.password_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IndividualComfirm Clone() {
      return new IndividualComfirm(this);
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 1;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IndividualComfirm);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IndividualComfirm other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Username != other.Username) return false;
      if (Password != other.Password) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Username.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Username);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IndividualComfirm other) {
      if (other == null) {
        return;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Username = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ToSend : pb::IMessage<ToSend> {
    private static readonly pb::MessageParser<ToSend> _parser = new pb::MessageParser<ToSend>(() => new ToSend());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ToSend> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tutorial.RoomReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ToSend() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ToSend(ToSend other) : this() {
      type_ = other.type_;
      result_ = other.result_;
      User = other.user_ != null ? other.User.Clone() : null;
      Room = other.room_ != null ? other.Room.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ToSend Clone() {
      return new ToSend(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 2;
    private string result_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Result {
      get { return result_; }
      set {
        result_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 3;
    private global::Tutorial.IndividualComfirm user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tutorial.IndividualComfirm User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "room" field.</summary>
    public const int RoomFieldNumber = 4;
    private global::Tutorial.Room room_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tutorial.Room Room {
      get { return room_; }
      set {
        room_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ToSend);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ToSend other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Result != other.Result) return false;
      if (!object.Equals(User, other.User)) return false;
      if (!object.Equals(Room, other.Room)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Result.Length != 0) hash ^= Result.GetHashCode();
      if (user_ != null) hash ^= User.GetHashCode();
      if (room_ != null) hash ^= Room.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (Result.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Result);
      }
      if (user_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(User);
      }
      if (room_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Room);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Result.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Result);
      }
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (room_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Room);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ToSend other) {
      if (other == null) {
        return;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Result.Length != 0) {
        Result = other.Result;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          user_ = new global::Tutorial.IndividualComfirm();
        }
        User.MergeFrom(other.User);
      }
      if (other.room_ != null) {
        if (room_ == null) {
          room_ = new global::Tutorial.Room();
        }
        Room.MergeFrom(other.Room);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 18: {
            Result = input.ReadString();
            break;
          }
          case 26: {
            if (user_ == null) {
              user_ = new global::Tutorial.IndividualComfirm();
            }
            input.ReadMessage(user_);
            break;
          }
          case 34: {
            if (room_ == null) {
              room_ = new global::Tutorial.Room();
            }
            input.ReadMessage(room_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
